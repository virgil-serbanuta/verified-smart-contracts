module COUNT-CAN-SIGN-PARTS
  imports EXECUTION-HELPERS
  imports PSEUDOCODE


  syntax TTCell ::= countCanSignLhs(
            signerIds:ExpressionList,
            K,
            UsersCell,
            numBoardMembers:KItem,
            numProposers:Usize,
            userIdToRole:Map,
            quorum:KItem,
            ActionStateCell,
            variables:Map,
            stack:List,
            ExternalCallEnvCell)
      [function, functional]

  rule countCanSignLhs(
            SignerIds:ExpressionList,
            K:K,
            Users:UsersCell,
            NumBoardMembers:KItem,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:KItem,
            ActionState:ActionStateCell,
            Variables:Map,
            Stack:List,
            ExternalCallEnv:ExternalCallEnvCell)
      => <TT>
          <k>
            call(countCanSign(SignerIds))
            ~> K
          </k>
          <state>
            <multisig-state>
              Users:UsersCell
              <board-state>
                <num-board-members>NumBoardMembers</num-board-members>
                <num-proposers>NumProposers</num-proposers>
                <user-roles>UserIdToRole</user-roles>
                <quorum>Quorum</quorum>
              </board-state>
              ActionState
            </multisig-state>
            <pseudocode-state>
              <variables>Variables</variables>
              <stack>Stack</stack>
            </pseudocode-state>
            ExternalCallEnv
          </state>
        </TT>

  syntax TTCell ::= countCanSignRhs(
            count:Usize,
            K,
            UsersCell,
            numBoardMembers:KItem,
            numProposers:Usize,
            userIdToRole:Map,
            quorum:KItem,
            ActionStateCell,
            variables:Map,
            stack:List,
            ExternalCallEnvCell)
      [function, functional]

  rule countCanSignRhs(
            Count:Usize,
            K:K,
            Users:UsersCell,
            NumBoardMembers:KItem,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:KItem,
            ActionState:ActionStateCell,
            Variables:Map,
            Stack:List,
            ExternalCallEnv:ExternalCallEnvCell)
      => <TT>
          <k>
            evaluate(Count) ~> K
          </k>
          <state>
            <multisig-state>
              Users
              <board-state>
                <num-board-members>NumBoardMembers</num-board-members>
                <num-proposers>NumProposers</num-proposers>
                <user-roles>UserIdToRole</user-roles>
                <quorum>Quorum</quorum>
              </board-state>
              ActionState
            </multisig-state>
            <pseudocode-state>
              <variables>Variables </variables>
              <stack>Stack</stack>
            </pseudocode-state>
            ExternalCallEnv
          </state>
        </TT>

  syntax Bool ::= countCanSignRequires(
            signerIds:ExpressionList,
            UsersCell,
            numBoardMembers:KItem,
            numProposers:Usize,
            userIdToRole:Map,
            quorum:KItem,
            ActionStateCell,
            variables:Map,
            stack:List,
            ExternalCallEnvCell)
      [function, functional]

  rule countCanSignRequires(
            SignerIds:ExpressionList,
            _Users:UsersCell,
            _NumBoardMembers:KItem,
            _NumProposers:Usize,
            UserIdToRole:Map,
            _Quorum:KItem,
            _ActionState:ActionStateCell,
            Variables:Map,
            _Stack:List,
            _ExternalCallEnv:ExternalCallEnvCell)
      =>
        isKResult(SignerIds)
        andBool listElementsAreUsize(SignerIds)
        andBool (notBool result in_keys(Variables))
        andBool (notBool user_role in_keys(Variables))
        andBool valuesAreOfType(UserIdToRole, rUserRole)

  syntax Bool ::= countCanSignEnsures(
            count:Usize,
            UsersCell,
            numBoardMembers:KItem,
            numProposers:Usize,
            userIdToRole:Map,
            quorum:KItem,
            ActionStateCell,
            variables:Map,
            stack:List,
            ExternalCallEnvCell)
      [function, functional]

  rule countCanSignEnsures(
            _Count:Usize,
            _Users:UsersCell,
            _NumBoardMembers:KItem,
            _NumProposers:Usize,
            _UserIdToRole:Map,
            _Quorum:KItem,
            _ActionState:ActionStateCell,
            _Variables:Map,
            _Stack:List,
            _ExternalCallEnv:ExternalCallEnvCell)
      => true

endmodule
