module PROOF-PERFORM-ACTION-ENDPOINT
  imports EXECUTION
  imports PSEUDOCODE

  claim 
      <T>
        performLhs(
            AddProposer(_ProposerAddress:Address) #as Action:Action,
            K:K,
            NumUsers:Usize,
            UserIdToAddress:Map,
            AddressToUserId:Map,
            NumBoardMembers:Usize,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:Usize,
            ActionState:ActionStateCell,
            Stack:List)
      </T>
      =>
      <T>
        performRhs(
            evaluate(void),
            K,
            ?NumUsersFinal,
            ?UserIdToAddressFinal,
            ?AddressToUserIdFinal,
            ?NumBoardMembersFinal,
            ?NumProposersFinal,
            ?UserIdToRoleFinal,
            Quorum,
            ActionState,
            ?_Variables:Map,
            Stack:List)
      </T>
    [trusted]

  claim 
      <T>
        performLhs(
            ChangeQuorum(u(NewQuorum:Int)) #as Action:Action,
            K:K,
            NumUsers:Usize,
            UserIdToAddress:Map,
            AddressToUserId:Map,
            u(NumBoardMembers:Int),
            NumProposers:Usize,
            UserIdToRole:Map,
            OldQuorum:Usize,
            ActionState:ActionStateCell,
            Stack:List)
      </T>
      =>
      <T>
        performRhs(
            evaluate(void),
            K,
            NumUsers,
            UserIdToAddress,
            AddressToUserId,
            u(NumBoardMembers),
            NumProposers,
            UserIdToRole,
            u(NewQuorum),
            ActionState,
            ?_Variables:Map,
            Stack:List)
      </T>
    requires true
        andBool NewQuorum <=Int NumBoardMembers
    [trusted]

  claim 
      <T>
        performLhs(
            Nothing #as Action:Action,
            K:K,
            NumUsers:Usize,
            UserIdToAddress:Map,
            AddressToUserId:Map,
            NumBoardMembers:Usize,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:Usize,
            ActionState:ActionStateCell,
            Stack:List)
      </T>
      =>
      <T>
        performRhs(
            evaluate(void),
            K,
            NumUsers,
            UserIdToAddress,
            AddressToUserId,
            NumBoardMembers,
            NumProposers,
            UserIdToRole,
            Quorum,
            ActionState,
            ?_Variables:Map,
            Stack)
      </T>
    [trusted]

  claim
      <T>
        performLhs(
            RemoveUser(UserAddress:Address) #as Action:Action,
            K:K,
            NumUsers:Usize,
            UserIdToAddress:Map,
            (UserAddress |-> UserId:KItem _AddressToUserId:Map) #as AddressToUserId:Map,
            NumBoardMembers:Usize,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:Usize,
            ActionState:ActionStateCell,
            Stack:List)
      </T>
      =>
      <T>
        performRhs(
            evaluate(void),
            K,
            ?NumUsersFinal,
            ?UserIdToAddressFinal,
            ?AddressToUserIdFinal,
            ?NumBoardMembersFinal,
            ?NumProposersFinal,
            ?UserIdToRoleFinal,
            Quorum,
            ActionState,
            ?_Variables:Map,
            Stack:List)
      </T>
    requires true
        andBool notBool (UserId in_keys(UserIdToRole))
    [trusted]

  claim
      <T>
        performLhs(
            RemoveUser(UserAddress:Address) #as Action:Action,
            K:K,
            NumUsers:Usize,
            UserIdToAddress:Map,
            AddressToUserId:Map,
            NumBoardMembers:Usize,
            NumProposers:Usize,
            UserIdToRole:Map,
            Quorum:Usize,
            ActionState:ActionStateCell,
            Stack:List)
      </T>
      =>
      <T>
        performRhs(
            evaluate(void),
            K,
            ?NumUsersFinal,
            ?UserIdToAddressFinal,
            ?AddressToUserIdFinal,
            ?NumBoardMembersFinal,
            ?NumProposersFinal,
            ?UserIdToRoleFinal,
            Quorum,
            ActionState,
            ?_Variables:Map,
            Stack:List)
      </T>
    requires true
        andBool notBool (UserAddress in_keys(AddressToUserId))
    [trusted]

  claim <T><TT>
          <k> runInstruction(performAction(Action:Action);) ~> K:K
          </k>
          invariantState(
              NumUsers:Usize,
              UserIdToAddress:Map,
              AddressToUserId:Map,
              NumBoardMembers:Usize,
              NumProposers:Usize,
              UserRoles:Map,
              Quorum:Usize,
              ActionLastIndex0:Usize,
              ActionData0:Map,
              ActionSigners0:Map)
        </TT></T>
      =>
        <T><TT>
          <k> K </k>
          invariantState(
              ?NumUsers1:Usize,
              ?UserIdToAddress1:Map,
              ?AddressToUserId1:Map,
              ?NumBoardMembers1:Usize,
              ?NumProposers1:Usize,
              ?UserRoles1:Map,
              ?Quorum1:Usize,
              ?ActionLastIndex1:Usize,
              ?ActionData1:Map,
              ?ActionSigners1:Map):StateCell
        </TT></T>
endmodule
